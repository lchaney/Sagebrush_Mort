setwd("~/Sagebrush_Mort")
source('~/GitHub/Sagebrush_Mort/Analysis/01_SM_load.R')
source('~/Sagebrush_Mort/Analysis/01_SM_load.R')
setwd("~/Documents/Sagebrush/")
source('~/GitHub/Sagebrush_Mort/Analysis/01_SM_load.R')
source('~/GitHub/Sagebrush_Mort/Analysis/02_SM_clean.R')
source('~/GitHub/Sagebrush_Mort/Analysis/03_SM_func.R')
source('~/GitHub/Sagebrush_Mort/Analysis/03_SM_func.R')
gar3plot
source('~/Sagebrush_Mort/Analysis/03a_SM_func_3gardsurv.R')
#==============================================================================================#
# Script created by Lindsay Chaney 2015 - lchaney@byu.edu
# Script created in version R 3.1.3
# This script is used for FUNCTIONS needed for *3 garden survival plots*
# Chaney et al 2015 Sagebrush mortatlity paper
#==============================================================================================#
#==============================================================================================#
#3 garden survival
#fit cox ph model to use in kaplain meyer plots
sfit_garden <- survfit(Surv(time, death)~strata(garden), data=surv3d)
sfit_typeE <- survfit(Surv(time, death)~strata(type), data=sdat_E)
sfit_typeM <- survfit(Surv(time, death)~strata(type), data=sdat_M)
sfit_typeO <- survfit(Surv(time, death)~strata(type), data=sdat_O)
#create survivorship plot for all three gardens
#all three gardens
gar3plot <- ggsurv_m(sfit_garden, surv.col = "black",
cens.col = "black", size.est=1) +
scale_linetype_manual(name="Garden",
values = 2:4) +
guides(color = FALSE) +
xlim(0, 60) + ylim(0, 1) +
theme_minimal() +
theme(axis.line = element_line(color = "black", size = .25),
legend.position = c(0.1, 0.25),
legend.title = element_text(face = "italic"),
legend.background = element_rect(colour = "gray"))
#ephraim
ephplot <- ggsurv_m(sfit_typeE, lty.est = 2, plot.cens = FALSE, size.est = 1) +
scale_color_manual(name="Ephraim",
breaks = c("T4x", "T2x", "W4x", "V2x", "V4x"),
values = c(T4x = "#e31a1c",
T2x = "#ff7f00",
W4x = "#33a02c",
V2x = "#1f78b4",
V4x = "#885dbc")) +
guides(linetype = FALSE) +
xlim(0, 60) + ylim(0, 1) +
theme_minimal() +
theme(axis.line = element_line(color = "black", size = .25),
legend.position = c(0.1, 0.25),
legend.title = element_text(face = "italic"),
legend.background = element_rect(colour = "gray"))
#Majors
majplot <- ggsurv_m(sfit_typeM, lty.est = 3, plot.cens = FALSE, size.est = 1) +
scale_color_manual(name="Majors",
breaks = c("T4x", "T2x", "W4x", "V2x", "V4x"),
values = c(T4x = "#e31a1c",
T2x = "#ff7f00",
W4x = "#33a02c",
V2x = "#1f78b4",
V4x = "#885dbc")) +
guides(linetype = FALSE) +
xlim(0, 60) + ylim(0, 1) +
theme_minimal() +
theme(axis.line = element_line(color = "black", size = .25),
legend.position = c(0.1, 0.25),
legend.title = element_text(face = "italic"),
legend.background = element_rect(colour = "gray"))
#Orchard
orchplot <- ggsurv_m(sfit_typeO, lty.est = 4, plot.cens = FALSE, size.est = 1) +
scale_color_manual(name="Orchards",
breaks = c("T4x", "T2x", "W4x", "V2x", "V4x"),
values = c(T4x = "#e31a1c",
T2x = "#ff7f00",
W4x = "#33a02c",
V2x = "#1f78b4",
V4x = "#885dbc")) +
guides(linetype = FALSE) +
xlim(0, 60) + ylim(0, 1) +
theme_minimal() +
theme(axis.line = element_line(color = "black", size = .25),
legend.position = c(0.1, 0.25),
legend.title = element_text(face = "italic"),
legend.background = element_rect(colour = "gray"))
#plot kaplain meyer plots into a 2 x 2 grids
km22plot <- plot_grid(gar3plot, ephplot, majplot, orchplot, labels = c("A", "B", "C", "D"), ncol = 2)
#summary of surviorship
surv3summary <- survfit(Surv(time, death)~ strata(garden), data=surv3d)
#sample size tables
surv3dsample <- with(surv3d, table(pop, type, garden))
#create plot (to append to climate data on when deaths occur)
death2 <- ggplot(data=surv3dd, aes(x=date, y=1, color= garden)) +
geom_jitter(position = position_jitter(width = .5), alpha=.4, na.rm=TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x="Year", y="Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels=c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title=element_blank(),
plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position="none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.margin = unit(1.1, "lines")
)
#==============================================================================================#
death2
death2 <- ggplot(data=surv3dd, aes(x=date, y=1, color= garden)) +
geom_jitter(position = position_jitter(width = .5), alpha=.4, na.rm=TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x="Year", y="Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels=c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title=element_blank(),
plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position="none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
#axis.ticks.margin = unit(1.1, "lines")
)
death2 <- ggplot(data=surv3dd, aes(x = date, y = 1, color = garden)) +
geom_jitter(position = position_jitter(width = .5), alpha = 0.4, na.rm = TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x = "Year", y = "Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels = c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title = element_blank(),
plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.margin = unit(1.1, "lines")
)
death2 <- ggplot(data = surv3dd, aes(x = date, y = 1, color = garden)) +
geom_jitter(position = position_jitter(width = .5), alpha = 0.4, na.rm = TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x = "Year", y = "Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels = c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title = element_blank(),
#plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
# axis.ticks.margin = unit(1.1, "lines")
)
death2
ggplot(data = surv3dd, aes(x = date, y = 1, color = garden)) +
geom_jitter(position = position_jitter(width = .5), alpha = 0.4, na.rm = TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x = "Year", y = "Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels = c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title = element_blank(),
plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.margin = unit(1.1, "lines")
)
library(grid) #required to change margins in ggplot
ggplot(data = surv3dd, aes(x = date, y = 1, color = garden)) +
geom_jitter(position = position_jitter(width = .5), alpha = 0.4, na.rm = TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x = "Year", y = "Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels = c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title = element_blank(),
plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.margin = unit(1.1, "lines")
)
death2 <- ggplot(data = surv3dd, aes(x = date, y = 1, color = garden)) +
geom_jitter(position = position_jitter(width = .5), alpha = 0.4, na.rm = TRUE) +
scale_x_date(limits = as.Date(c('2010-01-01','2015-05-08'))) +
theme_minimal() +
scale_y_continuous(breaks = 1) +
labs(x = "Year", y = "Mortality") +
scale_colour_manual(values = c("darkorange","indianred1", "steelblue"),
labels = c("Ephraim", "Majors Flat", "Orchard")) +
theme(legend.title = element_blank(),
plot.margin = unit(c(-2.7,0.5,0.5,0.5), "lines"),
#plot.margins #top, #right, #bottom, #left
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.margin = unit(1.1, "lines")
)
source('~/Sagebrush_Mort/Analysis/03b_SM_func_climate.R')
clim_graph
mintempsmonth <- summaryBy(Eph_min + Orch_min + Maj_min ~ Year + Month, data=climate, FUN=min, na.rm=TRUE)
mintempsmonth
mintempsmonth <- summaryBy(Eph_min + Orch_min + Maj_min ~ Year + Month, data=climate, FUN=min, )
is.na(mtm) <- do.call(cbind,lapply(mtm, is.infinite))
mintempsmonth <- summaryBy(Eph_min + Orch_min + Maj_min ~ Year + Month, data=climate, FUN=min, )
mintempsmonth
mtm <- melt(mintempsmonth, id = c("Year", "Month"))
mtm
names(mtm) <- c("Year", "Month", "Garden", "MinTemp")
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_violin() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp), data = clim2) +
geom_violin() + stat_smooth(method = "lm", col = "red") + facet_grid(Garden ~Year)
geom_violin() + + geom_dotplot() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_violin() + + geom_dotplot() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_violin() +  geom_dotplot() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_dotplot() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_linerange() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_violin() + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
ggplot(aes(y = MinTemp, x = Garden), data = clim2) +
geom_violin(scale = "area") + stat_smooth(method = "lm", col = "red") + facet_grid( ~Year)
mintempsmonth <- summaryBy(Eph_min + Orch_min + Maj_min ~ Year + Month, data = climate, FUN = min)
mintempsmonth <- melt(mintempsmonth, id = c("Year", "Month"))
names(mintempsmonth) <- c("Year", "Month", "Garden", "MinTemp")
mintempsmonth
mintempsmonth <- summaryBy(Eph_min + Orch_min + Maj_min ~ Year + Month, data = climate, FUN = min)
mintempsmonth
mintempsmonth <- summaryBy(Eph_min + Orch_min + Maj_min ~ Year + Month, data = climate, FUN = min, na.rm=TRUE)
is.na(mintempsmonth) <- do.call(cbind,lapply(mintempsmonth, is.infinite))
mintempsmonth
mintempsmonth <- summaryBy(Eph_min + Maj_min + Orch_min ~ Year + Month, data = climate, FUN = min, na.rm=TRUE)
is.na(mintempsmonth) <- do.call(cbind,lapply(mintempsmonth, is.infinite))
mintempsmonth
source('~/Sagebrush_Mort/Analysis/03c_SM_func_ephsurv.R')
summary_ephsurvlogn
ephsurvplot_lognorm
svdlrtest
svdatlrtest
lrchisqtable
pval_lrchisqtable
pval_lrchisqtagible
newbfp
probsurv1
probsurv2
summary(summary_ephsurvlogn, times = seq(from = 12, to = 60, by = 12))
summary(summary_ephsurvlogn, times = seq(from = 12, to = 60, by = 12))
summary(esurvfit, times = seq(from = 12, to = 60, by = 12))
probsurv1 <- summary(esurvfit, times = seq(from = 12, to = 60, by = 12))
probsurv2 <- summary(esurvfit, times = seq(from = 58, to = 60, by = 1))
probsurv1
probsurv2
probsurv2 <- summary(esurvfit, times = seq(from = 59, to = 60, by = 1))
probsurv2
View(popdat)
glmrsq <- function( model, ... ){
(1-exp((model$dev - model$null)/model$df.null)) / (1-exp(-model$null/model$df.null))
}
modglm <- glm(y ~ gspmtcm + type, data=popdat, family="quasibinomial")
# Gives Rsq + all predictor variables used.
glmrsq2 <- function( model, ... ){
cbind( deparse(model$formula[[3]]), (1-exp((model$dev - model$null)/model$df.null)) / (1-exp(-model$null/model$df.null)))
}
# Function for Sorting & ordering the output
sorter.r <- function( models, ... ) {
glmrsq2.results <- data.frame(do.call(rbind, lapply(models,  glmrsq2)))
glmrsq2.results[,2] <- as.numeric(as.character(glmrsq2.results[,2]))
glmrsq2.results[ order(glmrsq2.results[,2], decreasing=TRUE), ]
}
climvars <- names((popdat)[,c("adi", "adimindd0", "d100", "dd0", "dd5", "fday", "ffp", "gsdd5", "gsp", "pratio", "gspdd5", "gspmtcm", "gsptd", "map", "mapdd5", "mapmtcm", "maptd", "mat", "mmindd0", "mmax", "mmin",      "mtcm", "mtcmgsp", "mtcmmap", "sday", "sdi", "sdimindd0", "tdgsp", "tdiff", "tdmap", "smrpb", "sprp", "winp", "smrp", "sdimtcm", "dd0map", "dd0gsp")])
models1 <- lapply(climvars, function(x) {
glm(substitute(cbind(noSurv, noDead) ~ i + type, list(i = as.name(x))), data = proppop, family=quasibinomial)
})
sorter.r(models1)
models1 <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i + type, list(i = as.name(x))), data = proppop, family=quasibinomial)
})
sorter.r(models1)
models1 <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i + type, list(i = as.name(x))), data = popdat, family=quasibinomial)
})
sorter.r(models1)
climvars <- names((popdat)[,c("adi", "adimindd0", "d100", "dd0", "dd5", "fday", "ffp", "gsdd5", "gsp", "pratio", "gspdd5", "gspmtcm", "gsptd", "map", "mapdd5", "mapmtcm", "maptd", "mat", "mmindd0", "mmax", "mmin",      "mtcm", "mtcmgsp", "mtcmmap", "sday", "sdi", "sdimindd0", "tdgsp", "tdiff", "tdmap", "smrpb", "sprp", "winp", "smrp", "sdimtcm", "dd0map", "dd0gsp")])
models1 <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i + type, list(i = as.name(x))), data = popdat, family=quasibinomial)
})
sorter.r(models1)
models2 <- lapply(climvars, function(x) {
glm(substitute(cbind(noSurv, noDead) ~ i + gspmtcm + type, list(i = as.name(x))), data = proppop, family=quasibinomial)
})
sorter.r(models2)
models2 <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i + gspmtcm + type, list(i = as.name(x))), data = popdat, family=quasibinomial)
})
sorter.r(models2)
models2 <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i + mapmtcm + type, list(i = as.name(x))), data = popdat, family=quasibinomial)
})
sorter.r(models2)
fitmoda <- glm(cbind(surv, death) ~ sday + mapmtcm + type, data = popdat, family=quasibinomial)
anova(fitmoda, test="F")
fitmodB <- glm(cbind(surv, death) ~ sday + gspmtcm + type, data = popdat, family=quasibinomial)
anova(fitmodB, test="F")
models1t <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i, list(i = as.name(x))), data = popdat[which(popdat$type == "T4x" | popdat$type == "T2x"),], family=quasibinomial)
})
sorter.r(models1t)
models2t <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ tdiff + i, list(i = as.name(x))), data = popdat[which(popdat$type == "T4x" | popdat$type == "T2x"),], family=quasibinomial)
})
sorter.r(models2t)
models2t <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~  i + tdiff, list(i = as.name(x))), data = popdat[which(popdat$type == "T4x" | popdat$type == "T2x"),], family=quasibinomial)
})
sorter.r(models2t)
models1w <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i, list(i = as.name(x))), data = popdat[which(popdat$type == "W4x"),], family=quasibinomial)
})
sorter.r(models1w)
fitmodwb <- glm(cbind(surv, death) ~ gspmtcm, data = popdat[which(popdat$type == "W4x"),], family=quasibinomial)
anova(fitmodwb, test="F")
models1v <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i, list(i = as.name(x))), data = popdat[which(popdat$type == "V4x" | popdat$type == "V2x"),], family=quasibinomial)
})
sorter.r(models1v)
models2v <- lapply(climvars, function(x) {
glm(substitute(cbind(surv, death) ~ i + mtcm, list(i = as.name(x))), data = popdat[which(popdat$type == "V4x" | popdat$type == "V2x"),], family=quasibinomial)
})
sorter.r(models2v)
fitmodva <- glm(cbind(surv, death) ~ smrpb + mtcm, data = popdat[which(popdat$type == "V4x" | popdat$type == "V2x"),], family=quasibinomial)
anova(fitmodva, test="F")
anova(fitmoda, test="F")
anova(fitmodB, test="F")
View(sorter.r)
glmrsq(fitmodB)
glmrsq2(fitmodB)
anova
modglm <- glm(cbind(surv, death) ~ gspmtcm + type, data = popdat, family = "quasibinomial")
glmrsq <- function( model, ... ){
(1-exp((model$dev - model$null)/model$df.null)) / (1-exp(-model$null/model$df.null))
}
anova(modglm)
anova(modglm, test = "F")
modglm <- glm(cbind(surv, death) ~ sday + gspmtcm + type, data = popdat, family = "quasibinomial")
anova(modglm, test = "F")
climsurv <- anova(modglm, test = "F")
climsurv
climsurvrsq <- glmrsq(modglm)
summary(modglm)
coef(modglm)
coefclimsurv <- coef(modglm)
source('~/GitHub/Sagebrush_Mort/Analysis/04_SM_do.R')
deathclim
surv3summary
names(surv3summary)
surv3summary$n.event
surv3summary[,2]
dim(surv3summary)
surv3summary$n
surv3summary$events
surv3summary$call
surv3summary$time
setwd("~/Documents/Sagebrush/")
#source to LOAD data
#		source('Analysis/01_SM_load.R')
source('~/GitHub/Sagebrush_Mort/Analysis/01_SM_load.R')
#source to CLEAN data
#		source('Analysis/02_SM_clean.R')
source('~/GitHub/Sagebrush_Mort/Analysis/02_SM_clean.R')
#==============================================================================================#
# Script created by Lindsay Chaney 2015 - lchaney@byu.edu
# Script created in version R 3.1.3
# This script is used for FUNCTIONS needed for the Chaney et al 2015 Sagebrush mortatlity paper
#==============================================================================================#
#=== change source file location ===#
#==============================================================================================#
#packages
###you will need to make sure these parackages are installed first###
#load needed packages
library(devtools) #allows installation of packages from github
library(survival) #survival analysis
library(ggplot2) #plotting graphics
library(grid) #required to change margins in ggplot
#	library(GGally) #ggsurv to plot KM plot using ggplots
library(cowplot) #for multipanels ggplots
library(gridExtra) #arrangeGrob multiple ggplots together
library(scales) #required for ggsurv plots
library(doBy) #used for the summaryBy function
#	library(lme4) #used for linear mixed models
#	library(lmerTest) #calculate p values for fixed and random effects from lmer
#	library(plyr) #used for function rbind.fill in VIF step
#source custom ggsurv package from Edwin Thoen
source_url("https://raw.githubusercontent.com/lchaney/ggsurv_m/master/ggsurv_m_with_size_parameters.R")
#this ggsurv plot allows for custom line size
#you can find ggsurv function in the GGally library, but this is a custom :)
#thanks to Edwin Thoen <edwinthoen@gmail.com> for assistance!
#more information can be found at github.com/lchaney/ggsurv_m
#==============================================================================================#
#==============================================================================================#
#source functions for each subpart of the analysis
#three garden survival
source('~/GitHub/Sagebrush_Mort/Analysis/03a_SM_func_3gardsurv.R')
#climate data
source('~/GitHub/Sagebrush_Mort/Analysis/03b_SM_func_climate.R')
#ephraim survival data and contemporary climate data
source('~/GitHub/Sagebrush_Mort/Analysis/03c_SM_func_ephsurv.R')
#==============================================================================================#
deathclim
death2
clim_graph
arrangeGrob(clim_graph, death2, ncol=1, heights=c(4, 0.9))
arrangeGrob(clim_graph, death2)
?arrangeGrob
plot(deathclim)
deathclim <- plot(arrangeGrob(clim_graph, death2, ncol=1, heights=c(4, 0.9)))
deathclim
plot(deathclim)
plot(deathclim)
